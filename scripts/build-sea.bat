@echo off
setlocal enabledelayedexpansion

REM –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
set ARCH=%PROCESSOR_ARCHITECTURE%
if "%ARCH%"=="AMD64" set ARCH=x64
if "%ARCH%"=="ARM64" set ARCH=arm64

set OUTPUT_NAME=overpass2geojson-windows-%ARCH%.exe

echo.
echo üî® Building Node.js SEA for Windows %ARCH%...
echo    Output: %OUTPUT_NAME%
echo.

REM 1. –°–±–æ—Ä–∫–∞ —Å rspack
echo üì¶ Step 1: Building with rspack...
call yarn build
if errorlevel 1 (
    echo ‚ùå Build failed
    exit /b 1
)

REM 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è blob
echo.
echo üóúÔ∏è  Step 2: Generating SEA blob...
node --experimental-sea-config sea-config.json
if errorlevel 1 (
    echo ‚ùå SEA blob generation failed
    exit /b 1
)

REM 3. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Node.js binary
echo.
echo üìã Step 3: Copying Node.js binary...

REM –ò—Å–ø–æ–ª—å–∑—É–µ–º process.execPath –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –ø—É—Ç–∏ –∫ Node.js
for /f "delims=" %%i in ('node -e "console.log(process.execPath)"') do set NODE_PATH=%%i
echo    Using Node.js binary: %NODE_PATH%

copy "%NODE_PATH%" "%OUTPUT_NAME%" >nul
if errorlevel 1 (
    echo ‚ùå Failed to copy Node.js binary
    exit /b 1
)

REM 4. –ò–Ω–∂–µ–∫—Ç blob –≤ binary
echo.
echo üíâ Step 4: Injecting SEA blob into binary...
call npx postject "%OUTPUT_NAME%" NODE_SEA_BLOB sea-prep.blob --sentinel-fuse NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2
if errorlevel 1 (
    echo ‚ùå Injection failed
    exit /b 1
)

REM 5. –û—á–∏—Å—Ç–∫–∞
echo.
echo üßπ Step 5: Cleaning up...
if exist sea-prep.blob del sea-prep.blob

echo.
echo ‚úÖ Done! Executable created: %OUTPUT_NAME%
for %%A in ("%OUTPUT_NAME%") do echo    Size: %%~zA bytes

echo.
echo üìù To test the executable:
echo    %OUTPUT_NAME%
echo.

endlocal
