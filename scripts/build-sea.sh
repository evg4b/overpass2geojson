#!/bin/bash
set -e

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
PLATFORM=$(uname -s | tr '[:upper:]' '[:lower:]')
ARCH=$(uname -m)

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç Node.js
case "$ARCH" in
    x86_64) ARCH="x64" ;;
    aarch64|arm64) ARCH="arm64" ;;
esac

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
if [ "$PLATFORM" = "darwin" ]; then
    OUTPUT_NAME="overpass2geojson-macos-${ARCH}"
else
    OUTPUT_NAME="overpass2geojson-linux-${ARCH}"
fi

echo "üî® Building Node.js SEA for $PLATFORM $ARCH..."
echo "   Output: $OUTPUT_NAME"
echo ""

# 1. –°–±–æ—Ä–∫–∞ —Å rspack
echo "üì¶ Step 1: Building with rspack..."
yarn build

# 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è blob
echo ""
echo "üóúÔ∏è  Step 2: Generating SEA blob..."
node --experimental-sea-config sea-config.json

# 3. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Node.js binary
echo ""
echo "üìã Step 3: Copying Node.js binary..."

# –ò—â–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª Node.js
NODE_PATH=$(which node)

# –ï—Å–ª–∏ —ç—Ç–æ —Å–∫—Ä–∏–ø—Ç, –∏—â–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π binary
if file "$NODE_PATH" | grep -q "script"; then
    echo "   Detected wrapper script, searching for real binary..."
    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ process substitution
    NODE_PATH=$(node -e "console.log(process.execPath)")
fi

echo "   Using Node.js binary: $NODE_PATH"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª
if ! file "$NODE_PATH" | grep -q "Mach-O\|ELF"; then
    echo "   ‚ùå Error: Not a valid binary file"
    file "$NODE_PATH"
    exit 1
fi

cp "$NODE_PATH" "$OUTPUT_NAME"

# 4. –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è macOS)
if [ "$PLATFORM" = "darwin" ]; then
    echo ""
    echo "üîì Step 4: Removing signature (macOS)..."
    codesign --remove-signature "$OUTPUT_NAME" 2>/dev/null || echo "   ‚ö†Ô∏è  Warning: Could not remove signature"
else
    echo ""
    echo "‚è≠Ô∏è  Step 4: Skipping signature removal (not macOS)..."
fi

# 5. –ò–Ω–∂–µ–∫—Ç blob –≤ binary
echo ""
echo "üíâ Step 5: Injecting SEA blob into binary..."
if [ "$PLATFORM" = "darwin" ]; then
    npx postject "$OUTPUT_NAME" NODE_SEA_BLOB sea-prep.blob \
        --sentinel-fuse NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2 \
        --macho-segment-name NODE_SEA
else
    npx postject "$OUTPUT_NAME" NODE_SEA_BLOB sea-prep.blob \
        --sentinel-fuse NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2
fi

# 6. –ü–æ–¥–ø–∏—Å—å binary (—Ç–æ–ª—å–∫–æ –¥–ª—è macOS)
if [ "$PLATFORM" = "darwin" ]; then
    echo ""
    echo "üîê Step 6: Signing binary (macOS)..."
    codesign --sign - "$OUTPUT_NAME" 2>/dev/null || echo "   ‚ö†Ô∏è  Warning: Could not sign binary"
else
    echo ""
    echo "‚è≠Ô∏è  Step 6: Skipping signing (not macOS)..."
fi

# 7. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
echo ""
echo "üîß Step 7: Setting executable permissions..."
chmod +x "$OUTPUT_NAME"

# 8. –û—á–∏—Å—Ç–∫–∞
echo ""
echo "üßπ Step 8: Cleaning up..."
rm -f sea-prep.blob

echo ""
echo "‚úÖ Done! Executable created: ./$OUTPUT_NAME"
ls -lh "$OUTPUT_NAME" | awk '{print "   Size: " $5}'

echo ""
echo "üìù To test the executable:"
echo "   ./$OUTPUT_NAME"
