import https from 'https';
import fs from 'fs';
import path from 'path';
import readline from 'readline';
import osmtogeojson from 'osmtogeojson';

const MAX_RETRIES = 3;
const RETRY_DELAY = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã

interface HTTPSRequestOptions {
  hostname: string;
  path: string;
  method: string;
  headers: {
    'Content-Type': string;
    'Content-Length': number;
    'Accept': string;
    'User-Agent': string;
    'Origin': string;
    'Referer': string;
  };
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
 */
function readMultilineInput(): Promise<string> {
  return new Promise((resolve) => {
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });

    console.log('üìù –í–≤–µ–¥–∏—Ç–µ Overpass QL –∑–∞–ø—Ä–æ—Å (–Ω–∞–∂–º–∏—Ç–µ Ctrl+D –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞):\n');

    const lines: string[] = [];

    rl.on('line', (line: string) => {
      lines.push(line);
    });

    rl.on('close', () => {
      resolve(lines.join('\n'));
    });
  });
}

/**
 * –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è retry
 */
function delay(ms: number): Promise<void> {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
 */
async function fetchAndConvert(overpassQuery: string, attempt: number = 1): Promise<void> {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const outputDir = path.join(__dirname, 'results', timestamp);

  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }

  console.log(`\nüìÅ –ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${outputDir}`);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
  const queryPath = path.join(outputDir, 'query.txt');
  fs.writeFileSync(queryPath, overpassQuery, 'utf8');
  console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${queryPath}`);

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–∞
  const postData = `data=${encodeURIComponent(overpassQuery)}`;

  const options: HTTPSRequestOptions = {
    hostname: 'overpass-api.de',
    path: '/api/interpreter',
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
      'Content-Length': Buffer.byteLength(postData),
      'Accept': '*/*',
      'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
      'Origin': 'https://overpass-turbo.eu',
      'Referer': 'https://overpass-turbo.eu/'
    }
  };

  console.log(`üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Overpass API... (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${MAX_RETRIES})\n`);

  return new Promise((resolve, reject) => {
    const req = https.request(options, (res) => {
      let data = '';

      res.on('data', (chunk: Buffer) => {
        data += chunk.toString();
      });

      res.on('end', async () => {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
          if (res.statusCode !== 200) {
            throw new Error(`HTTP ${res.statusCode}: ${data}`);
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
          const responsePath = path.join(outputDir, 'response.json');
          fs.writeFileSync(responsePath, data, 'utf8');
          console.log(`‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${responsePath}`);

          // –ü–∞—Ä—Å–∏–º JSON
          const osmData = JSON.parse(data);
          console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ OSM: ${osmData.elements ? osmData.elements.length : 0}`);

          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ GeoJSON
          console.log('üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ GeoJSON...');
          const geojson = osmtogeojson(osmData);

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º GeoJSON
          const geojsonPath = path.join(outputDir, 'result.geojson');
          fs.writeFileSync(geojsonPath, JSON.stringify(geojson, null, 2), 'utf8');
          console.log(`‚úÖ GeoJSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${geojsonPath}`);

          console.log('\nüéâ –ì–æ—Ç–æ–≤–æ!');
          console.log(`üìÇ –í—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ: ${outputDir}`);
          console.log(`   - query.txt (–∑–∞–ø—Ä–æ—Å)`);
          console.log(`   - response.json (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç)`);
          console.log(`   - result.geojson (–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π GeoJSON)`);

          resolve();
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : String(error);
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${errorMessage}`);
          reject(error);
        }
      });
    });

    req.on('error', (error: Error) => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
      reject(error);
    });

    req.write(postData);
    req.end();
  });
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å retry –ª–æ–≥–∏–∫–æ–π
 */
async function main(): Promise<void> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const overpassQuery = await readMultilineInput();

    if (!overpassQuery.trim()) {
      console.error('‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!');
      process.exit(1);
    }

    console.log('\n‚úÖ –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω\n');

    // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å retry
    for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {
      try {
        await fetchAndConvert(overpassQuery, attempt);
        break; // –£—Å–ø–µ—Ö - –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
      } catch (error) {
        if (attempt < MAX_RETRIES) {
          console.log(`\n‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${RETRY_DELAY / 1000} —Å–µ–∫—É–Ω–¥...\n`);
          await delay(RETRY_DELAY);
        } else {
          console.error(`\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ ${MAX_RETRIES} –ø–æ–ø—ã—Ç–æ–∫`);
          process.exit(1);
        }
      }
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', errorMessage);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
main();
